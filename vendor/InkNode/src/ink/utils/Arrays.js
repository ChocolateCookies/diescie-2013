// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    return {
      shuffle: function(l) {
        var clone, e, i, r;
        clone = l.slice(0);
        r = [];
        while (clone.length > 1) {
          e = clone.pop();
          i = Math.floor(Math.random() * clone.length);
          r.push(clone[i]);
          clone[i] = e;
        }
        r.push(clone[0]);
        return r;
      },
      contains: function(l, needle) {
        return Arrays.indexOf(l, needle) !== -1;
      },
      indexOf: function(l, needle) {
        var i, _i, _ref;
        for (i = _i = _ref = l.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          if (l[i] === needle) {
            return i;
          }
        }
        return -1;
      },
      each: function(a, f) {
        var i, _i, _ref;
        for (i = _i = _ref = l.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          f.call(a[i], i, a[i]);
        }
      },
      map: function(a, f) {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = _ref = l.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          _results.push(f.call(a[i], i, a[i]));
        }
        return _results;
      },
      filter: function(a, f) {
        var i, result, _i, _ref;
        result = [];
        for (i = _i = _ref = l.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          if (f.call(a[i], i, a[i])) {
            result.push(a[i]);
          }
        }
        return result;
      }
    };
  });

}).call(this);
