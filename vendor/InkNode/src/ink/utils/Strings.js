// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  define([], function() {
    return {
      nl2br: function(string) {
        return string.replace(/[\n\r(\n\r)(\r\n)]/g, '<br />');
      },
      br2nl: function(string) {
        return string.replace(/<br\s*\/?>/mg, "\n");
      },
      repeat: function(str, n) {
        var i, result, _i;
        result = "";
        for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
          result = result + str;
        }
        return result;
      },
      rpad: function(str, l, c) {
        var i, _i, _ref;
        c = c || " ";
        for (i = _i = _ref = l - str.length; _ref <= 1 ? _i <= 1 : _i >= 1; i = _ref <= 1 ? ++_i : --_i) {
          str += c;
        }
        return str;
      },
      lpad: function(str, l, c) {
        var i, _i, _ref;
        c = c || " ";
        for (i = _i = _ref = l - str.length; _ref <= 1 ? _i <= 1 : _i >= 1; i = _ref <= 1 ? ++_i : --_i) {
          str = c + str;
        }
        return str;
      },
      sprintf: function() {
        var length, matches, mult, needle, needles, res, rex, str, _i, _len;
        str = arguments[0], needles = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = needles.length; _i < _len; _i++) {
          needle = needles[_i];
          rex = /(.*?)%(s|d\d+)(.*)$/g;
          matches = rex.exec(str);
          if (matches.length === 4) {
            res = matches[1];
            if (matches[2] === "s") {
              res = res + needle;
            } else if (matches[2][0] === "d") {
              length = parseInt(Array.prototype.splice.call(matches[2], 1));
              mult = Math.pow(10, length);
              res = res + (Math.round(needle * mult) / mult);
            }
            res = res + matches[3];
            str = res;
          } else {
            return str;
          }
        }
        return str;
      }
    };
  });

}).call(this);
